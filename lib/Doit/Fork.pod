=head1 NAME

Doit::Fork - run code in another process

=head1 SYNOPSIS

    use Doit;
    use Doit::Log;
    sub run_test {
        my(undef, $arg) = @_;
        return "running in process $$ with arg $arg";
    }
    return 1 if caller;
    my $doit = Doit->init;
    $doit->add_component('fork');
    my $fork = $doit->do_fork;
    info $fork->call_with_runner('run_test', 'test argument');
    undef $fork;
    info $Doit::Fork::last_exits[-1]->{msg};

=head1 DESCRIPTION

This component provides a function C<do_fork>, which forks a new
process and returns a new Doit runner (like L<Doit/do_ssh_connect> or
L<Doit/do_sudo>. This process is capable of running subroutines (using
C<call_with_runner> or C<call>), or any other core Doit function.

A possible use case is to have multiple separated processes, but with
the ability (unlike with normal forked processes) to call subroutines
in these processes with possibly complex arguments and return values.

Note that all communication is still synchronous.

=head2 MODULE VARIABLES

=over

=item C<@last_exits>

After destroying a fork (e.g. by using C<undef $fork> or on scope
exits) the worker will exit, the process will be reaped and the exit
information will be put into the module variable C<@last_exits> as a
hash with at least the following elements: C<exitcode>, C<pid>,
C<msg>. Only the information of the last 10 exits will be kept. This
number can be changed by setting C<$keep_last_exits>.

=item C<$keep_last_exits>

The number of process information kept. By default 10.

=back

=head1 AUTHOR

Slaven Rezic <srezic@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2017,2023 Slaven Rezic. All rights reserved.
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

L<Doit>, L<perlfunc/fork>

=cut
